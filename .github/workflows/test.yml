name: 'Test'
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * SAT'

jobs:
  setup-actions:
    name: 'Setup actions'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v4'
      - name: 'Cache node packages'
        uses: 'actions/cache@v4'
        with:
          path: '~/.npm'
          key: "${{ hashFiles('package-lock.json') }}-${{ hashFiles('.github/actions/check-version/package-lock.json') }}"
      - name: 'Build actions'
        run: |
          npm ci
          npm run --silent build
          mkdir -p ${{ github.workspace }}/actions/setup-vim
          cp action.js action.yml ${{ github.workspace }}/actions/setup-vim

          cd ${{ github.workspace }}/.github/actions/check-version
          npm ci
          npm run --silent build
          mkdir -p ${{ github.workspace }}/actions/check-version
          cp action.js action.yml ${{ github.workspace }}/actions/check-version
      - name: 'Upload actions as artifact'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'actions'
          path: 'actions'
      - name: 'Get GitHub GraphQL API rate limit'
        id: rate_limit
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          query: |
            query {
              rateLimit {
                limit
                cost
                remaining
                resetAt
              }
            }
      - name: 'Show GitHub GraphQL API rate limit'
        run: echo "${{ steps.rate_limit.outputs.data }}"


  generate-matrix:
    name: 'Generate matrix'
    runs-on: 'ubuntu-latest'
    outputs:
      matrix: ${{ steps.generate.outputs.result }}
    steps:
      - name: 'Generate matrix'
        id: generate
        uses: 'actions/github-script@v7'
        with:
          script: |
            const matrix = [
              ["Vim", "head"],
              ["Vim", "v9.1.0000"],
              ["Vim", "v9.0.0000"],
              ["Vim", "v8.2.0000"],
              ["Vim", "v8.1.0001"],
              ["Vim", "v8.0.0002"],
              ["Vim", "v7.4"],
              ["Neovim", "head"],
              ["Neovim", "v0.10.2"],
              ["Neovim", "v0.9.5"],
              ["Neovim", "v0.9.0"],
              ["Neovim", "v0.8.3"],
              ["MacVim", "head"],
              ["MacVim", "release-179"],  // v9.1.0000
              ["MacVim", "snapshot-173"],  // v9.0.0065
              ["MacVim", "snapshot-162"],  // v8.2.319
            ].flatMap(([vim_type, vim_version]) =>
              ["Linux", "MacOS", "Windows"].map(platform => ({
                vim_type,
                vim_version,
                platform,
              }))
            ).flatMap((param) =>
              ["GUI", "CUI"].map((gui_cui) => ({
                ...param,
                gui_cui,
              }))
            ).flatMap((param) =>
              ["DL", "AT", "BD"].map((dl_bd) => ({
                ...param,
                dl_bd,
              }))
            ).flatMap((param) =>
              ["x86_64"].map((arch) => ({
                ...param,
                arch,
              }))
            ).concat(
              [
                {
                  vim_type: "Vim",
                  vim_version: "head",
                  platform: "Windows",
                  gui_cui: "GUI",
                  dl_bd: "BD",
                  arch: "x86",
                },
              ]
            ).filter(({ vim_type, vim_version, platform, gui_cui, dl_bd }) => {
              // DL Vim on MacOS is unavailable
              if (vim_type === "Vim" && platform === "MacOS" && dl_bd === "DL") {
                return false;
              }
              // Downloading Vim from AppImage is available from v8.1.1239.
              if (vim_type === "Vim" && platform === "Linux" && dl_bd === "DL" &&
                  (vim_version === "v8.1.0001" || vim_version === "v8.0.0002" || vim_version === "v7.4")) {
                return false;
              }
              // GUI version of Neovim is unavailable (also skip on Windows)
              if (vim_type === "Neovim" && gui_cui === "GUI") {
                return false;
              }
              // Build Neovim on Windows is not supported yet
              if (vim_type === "Neovim" && platform === "Windows" && dl_bd === "BD") {
                return false;
              }
              // GUI version of MacVim is unavailable
              if (platform === "MacOS" && gui_cui === "GUI") {
                return false;
              }
              // MacVim is available only on MacOS
              if (vim_type === "MacVim" && platform !== "MacOS") {
                return false;
              }
              return true;
            }).map(({ vim_type, vim_version, platform, gui_cui, dl_bd }) => ({
              vim_type,
              vim_version,
              platform,
              gui_cui,
              dl_bd,
              os: {
                Linux: "ubuntu-latest",
                MacOS: "macos-latest",
                Windows: "windows-latest",
              }[platform],
              gui: gui_cui === "GUI" ? "yes" : "no",
              download: {
                DL: "always",
                AT: "available",
                BD: "never",
              }[dl_bd],
            }));
            console.log(JSON.stringify(matrix, null, 2));
            return { include: matrix };

  test:
    name: "${{ matrix.gui_cui }}/${{ matrix.dl_bd }}: ${{ matrix.vim_type }} ${{ matrix.vim_version }} on ${{ matrix.platform }}${{ matrix.arch == 'x86' && ' (x86)' || ''}}"
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false

    needs:
      - 'setup-actions'
      - 'generate-matrix'
    runs-on: '${{ matrix.os }}'
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Show job info'
        run: |
          echo "Platform: ${{ matrix.platform }}"
          echo "OS: ${{ matrix.os }}"
          echo "Vim type: ${{ matrix.vim_type }}"
          echo "Vim version: ${{ matrix.vim_version }}"
          echo "GUI: ${{ matrix.gui }}"
          echo "Download: ${{ matrix.download }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Cache key: 'test-${{ github.run_id }}-${{ github.run_attempt }}-${{ strategy.job-index }}'"
      - name: 'Download actions'
        uses: 'actions/download-artifact@v4'
        with:
          name: 'actions'
          path: 'actions'
      - name: 'Setup Vim'
        id: 'vim'
        uses: './actions/setup-vim'
        with:
          vim_version: '${{ matrix.vim_version }}'
          vim_type: '${{ matrix.vim_type }}'
          gui: '${{ matrix.gui }}'
          arch: '${{ matrix.arch }}'
          download: '${{ matrix.download }}'
          cache: 'test-${{ github.run_id }}-${{ github.run_attempt }}-${{ strategy.job-index }}'
      - name: 'Check Setup Vim is done without cache'
        if: "matrix.download == 'never'"
        run: |
          if [[ "${{ steps.vim.outputs.cache_hit }}" == "true" ]]; then
            echo "Cache should not hit, but hit."
            exit 1
          else
            echo "Cache did not hit as expected."
          fi
      - name: 'Check Vim version'
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.vim.outputs.actual_vim_version }}'
          executable: '${{ steps.vim.outputs.executable }}'
          executable_path: '${{ steps.vim.outputs.executable_path }}'
          vim_type: '${{ matrix.vim_type }}'
          gui: '${{ matrix.gui }}'
          arch: '${{ matrix.arch }}'
      - name: 'Delete installed Vim to reinstall'
        if: "matrix.download == 'never'"
        run: |
          rm -fr "${{ steps.vim.outputs.install_path }}"
      - name: 'Setup Vim with cache'
        id: 'vim_with_cache'
        if: "matrix.download == 'never'"
        uses: './actions/setup-vim'
        with:
          vim_version: '${{ matrix.vim_version }}'
          vim_type: '${{ matrix.vim_type }}'
          gui: '${{ matrix.gui }}'
          download: '${{ matrix.download }}'
          cache: 'test-${{ github.run_id }}-${{ github.run_attempt }}-${{ strategy.job-index }}'
      - name: 'Check Setup Vim is done with cache'
        if: "matrix.download == 'never'"
        run: |
          if [[ "${{ steps.vim_with_cache.outputs.cache_hit }}" == "true" ]]; then
            echo "Cache hit!"
          else
            echo "Cache not hit..."
            exit 1
          fi

  multiple-test:
    name: 'Install multiple Vims on ${{ matrix.platform }}'
    strategy:
      matrix:
        platform: ['Linux', 'MacOS', 'Windows']

        include:
          - platform: 'Linux'
            os: 'ubuntu-latest'
          - platform: 'MacOS'
            os: 'macos-latest'
          - platform: 'Windows'
            os: 'windows-latest'
      fail-fast: false

    needs: 'setup-actions'
    runs-on: '${{ matrix.os }}'
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Download actions'
        uses: 'actions/download-artifact@v4'
        with:
          name: 'actions'
          path: 'actions'

      - name: 'Setup Vim head'
        id: 'vim_head'
        uses: './actions/setup-vim'
        with:
          vim_version: 'head'
          vim_type: 'Vim'
      - name: 'Setup Vim latest'
        id: 'vim_latest'
        uses: './actions/setup-vim'
        with:
          vim_version: 'v9.1.0000'
          vim_type: 'Vim'
      - name: 'Setup Neovim head'
        id: 'neovim_head'
        uses: './actions/setup-vim'
        with:
          vim_version: 'head'
          vim_type: 'Neovim'
      - name: 'Setup Neovim latest'
        id: 'neovim_latest'
        uses: './actions/setup-vim'
        with:
          vim_version: 'v0.10.2'
          vim_type: 'Neovim'
      - name: 'Setup MacVim head'
        if: "matrix.platform == 'MacOS'"
        id: 'macvim_head'
        uses: './actions/setup-vim'
        with:
          vim_version: 'head'
          vim_type: 'MacVim'
      - name: 'Setup MacVim latest'
        if: "matrix.platform == 'MacOS'"
        id: 'macvim_latest'
        uses: './actions/setup-vim'
        with:
          vim_version: 'release-179'
          vim_type: 'MacVim'

      - name: 'Check Vim head version'
        if: "always() && steps.vim_head.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.vim_head.outputs.actual_vim_version }}'
          executable: '${{ steps.vim_head.outputs.executable }}'
          executable_path: '${{ steps.vim_head.outputs.executable_path }}'
          vim_type: 'Vim'
          use_executable_path: 'yes'
      - name: 'Check Vim latest version'
        if: "always() && steps.vim_latest.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.vim_latest.outputs.actual_vim_version }}'
          executable: '${{ steps.vim_latest.outputs.executable }}'
          executable_path: '${{ steps.vim_latest.outputs.executable_path }}'
          vim_type: 'Vim'
          use_executable_path: 'yes'
      - name: 'Check Neovim head version'
        if: "always() && steps.neovim_head.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.neovim_head.outputs.actual_vim_version }}'
          executable: '${{ steps.neovim_head.outputs.executable }}'
          executable_path: '${{ steps.neovim_head.outputs.executable_path }}'
          vim_type: 'Neovim'
          use_executable_path: 'yes'
      - name: 'Check Neovim latest version'
        if: "always() && steps.neovim_latest.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.neovim_latest.outputs.actual_vim_version }}'
          executable: '${{ steps.neovim_latest.outputs.executable }}'
          executable_path: '${{ steps.neovim_latest.outputs.executable_path }}'
          vim_type: 'Neovim'
          use_executable_path: 'yes'
      - name: 'Check MacVim head version'
        if: "always() && steps.macvim_head.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.macvim_head.outputs.actual_vim_version }}'
          executable: '${{ steps.macvim_head.outputs.executable }}'
          executable_path: '${{ steps.macvim_head.outputs.executable_path }}'
          vim_type: 'MacVim'
          use_executable_path: 'yes'
      - name: 'Check MacVim latest version'
        if: "always() && steps.macvim_latest.conclusion == 'success'"
        uses: './actions/check-version'
        with:
          expected_vim_version: '${{ steps.macvim_latest.outputs.actual_vim_version }}'
          executable: '${{ steps.macvim_latest.outputs.executable }}'
          executable_path: '${{ steps.macvim_latest.outputs.executable_path }}'
          vim_type: 'MacVim'
          use_executable_path: 'yes'


  show-limit-after:
    name: 'Show GitHub API rate limit after test'
    needs: ['test', 'multiple-test']
    runs-on: 'ubuntu-latest'
    timeout-minutes: 1
    if: 'always()'
    steps:
      - name: 'Get GitHub GraphQL API rate limit'
        id: rate_limit
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          query: |
            query {
              rateLimit {
                limit
                cost
                remaining
                resetAt
              }
            }
      - name: 'Show GitHub GraphQL API rate limit'
        run: echo "${{ steps.rate_limit.outputs.data }}"
